//根据isModule标签动态的切换 集成/组件模式
if (isModule){
    apply plugin: 'com.android.library'
}else{
    apply plugin: 'com.android.application'
}

def config = rootProject.ext.android
def appId = rootProject.ext.appId
def appDependencies = rootProject.ext.appDependencies;
def appCompileOptions=rootProject.ext.appCompileOptions;

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        //组件模式下
        if (!rootProject.ext.isModule){
            applicationId appId.module2
        }
        //资源配置
        sourceSets{
            main{
                //在组件模式下 使用不同的manifest文件
                if(!rootProject.ext.isModule){
                    manifest.srcFile 'src/main/module/AndroidManifest.xml'
                    java.srcDirs 'src/main/module/java','src/main/java'
                }else{
                    manifest.srcFile 'src/main/AndroidManifest.xml'
                }
            }
        }

        //混淆
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'

        //添加一条 boolean类型的变量
        buildConfigField("boolean","isModule",String.valueOf(isModule))

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = appCompileOptions.sourceCompatibility
        targetCompatibility = appCompileOptions.targetCompatibility
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation appDependencies.junit
    implementation appDependencies.appcompat
    implementation appDependencies.design
    implementation appDependencies.runner
    implementation appDependencies.espresso_core
}
